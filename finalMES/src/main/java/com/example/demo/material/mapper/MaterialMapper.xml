<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.example.demo.material.mapper.MaterialMapper">
	<!-- 발주 -->
	<select id="getMaterialOrderList" resultType="MatOrderVO">
		SELECT
				mo.mat_or_code,
				mo.mat_or_name,
				mo.mat_code,
				b.business_code,
				b.business_name,
				mo.mat_or_count,
				mo.mat_or_date,
				mo.mat_or_due_date,
				mo.mat_or_manager
		FROM mat_order mo
		JOIN business b ON mo.business_code = b.business_code
		JOIN mat_order_info moi ON mo.mat_or_code = moi.mat_or_code
	</select>

	<!-- 발주상세 -->
	<select id="getMaterialOrdInfoList" resultType="MatOrderInfoVO">
		SELECT
				mo.mat_or_code,
				mo.mat_or_name,
				mo.mat_code,
				m.mat_name,
				b.business_code,
				b.business_name,
				mo.mat_or_count,
				mo.mat_or_date,
				mo.mat_or_due_date,
				mo.mat_or_manager,
				find_codename(mo.mat_or_state) mat_or_state
		FROM mat_order mo
		LEFT JOIN business b ON mo.business_code = b.business_code
		JOIN material m ON mo.mat_code=m.mat_code
		ORDER BY mat_or_code DESC

	</select>

	<!-- 발주 목록 쪽 거래처 -->
	<select id="getMaterialOrdInfoList1" resultType="MatOrderInfoVO">
		SELECT
			b.business_code,
			b.business_name,
			MIN(m.mat_code) AS matCode,
			MIN(m.mat_name) AS matName
		FROM business b
		LEFT JOIN mat_order mo ON b.business_code = mo.business_code
		LEFT JOIN material m ON mo.mat_code = m.mat_code
		WHERE b.business_type IN ('b2')
		GROUP BY b.business_code, b.business_name
	</select>

	<!-- 발주 자재 관리 -->
	<select id="getOriginMaterialList" resultType="OriginMaterialVO">
		SELECT m.*, (SELECT SUM(mat_count) FROM mat_lot ml WHERE ml.mat_code = m.mat_code) AS matCount2
		FROM
		material m ORDER BY mat_code


	</select>

	<!-- 자재관리 -->
	<select id="getOriginMaterialList1"
		resultType="OriginMaterialVO">
			SELECT DISTINCT
			    m.mat_code,
			    m.mat_name,
			    m.mat_safe_stock,
			    m.mat_unit,
			    m.mat_standard,
			    (SELECT SUM(mat_count) FROM mat_lot WHERE mat_code = m.mat_code) AS matCount2,
			    ml.mat_input_count
			FROM material m 
			JOIN (
			    SELECT
			        mat_code,
			        MAX(mat_input_count) AS mat_input_count
			    FROM mat_lot
			    GROUP BY mat_code
			) ml ON m.mat_code = ml.mat_code
			ORDER BY m.mat_code ASC
	</select>

	<!-- 출고 관리 -->
	<select id="getOutputList" resultType="MatOutputVO">
		SELECT ml.mat_lot_code,
		        ml.mat_count,
		        m.mat_name,
		        b.business_name,
		        mop.mat_out_code,
		        mop.mat_out_date,
		        mo.mat_or_manager
		FROM mat_lot ml
		JOIN material m ON ml.mat_code = m.mat_code
		JOIN mat_order mo ON m.mat_code = mo.mat_code
		JOIN business b ON mo.business_code = b.business_code
		LEFT JOIN mat_output mop ON b.business_code = mop.business_code
	</select>

	<!-- 입고 목록 관리 -->
	<select id="getInputList" resultType="MatInputVO">
		SELECT mo.mat_or_code,
				mo.mat_or_name,
				mo.mat_code,
				m.mat_name,
				m.mat_unit,
				m.mat_standard,
				b.business_code,
				b.business_name,
				mo.mat_or_count,
				mo.mat_or_date,
				mo.mat_or_due_date,
				mo.mat_or_manager,
				mo.mat_or_state,
				mi.mat_ins_date,
				mi.mat_ins_count,
				mi.mat_ins_code,
				mi.mat_ins_good,
				mi.mat_ins_bad,
                ml.mat_lot_code,
                ml.mat_input_date,
                ml.mat_input_count
		FROM mat_order mo
		LEFT JOIN mat_inspection mi ON mo.mat_or_code = mi.mat_or_code
		LEFT JOIN business b ON mo.business_code = b.business_code
		LEFT JOIN material m ON mo.mat_code = m.mat_code
        LEFT JOIN mat_lot ml ON mi.mat_ins_code = ml.mat_ins_code
        ORDER BY ml.mat_lot_code DESC

	</select>

	<!-- 입고 검수 -->
	<select id="getMatInsList" resultType="MatInspectionVO">
		SELECT mo.mat_or_code,
				mo.mat_or_name,
				mo.mat_code,
				m.mat_name,
				m.mat_unit,
				m.mat_standard,
				b.business_code,
				b.business_name,
				mo.mat_or_count,
				mo.mat_or_date,
				mo.mat_or_due_date,
				mo.mat_or_manager,
				mo.mat_or_state,
				mi.mat_ins_date,
				mi.mat_ins_count,
				mi.mat_ins_code,
				mi.mat_ins_good,
				mi.mat_ins_bad
		FROM mat_order mo
		LEFT JOIN mat_inspection mi ON mo.mat_or_code = mi.mat_or_code
		LEFT JOIN business b ON mo.business_code = b.business_code
		JOIN material m ON mo.mat_code = m.mat_code
		ORDER BY mat_or_code DESC
	</select>

	<!-- 반품 관리 -->
	<select id="getReturnList" resultType="MatReturnVO">
		SELECT MR.mat_re_code,
				B.business_name,
				M.mat_code,
				M.mat_name,
				ML.mat_lot_code,
				ML.mat_count,
				MR.mat_re_count,
				MR.mat_re_content,
				MR.mat_re_start_date,
				MR.mat_re_manager,
				MR.mat_re_state
		FROM mat_return MR
		JOIN business B ON
		MR.business_code = B.business_code
		JOIN mat_lot ML ON MR.mat_lot_code = ML.mat_lot_code
		JOIN material M ON ML.mat_code = M.mat_code
	</select>

	<!-- 발주 등록 -->
	<insert id="insertMatOrder" parameterType="MatOrderVO">
		INSERT INTO mat_order
		(
			mat_code,
			business_code,
			mat_or_date,
			mat_or_manager,
			mat_or_count,
			mat_or_name,
			mat_or_state,
			mat_or_due_date
		)
		VALUES
		(
			#{matCode},
			#{businessCode},
			sysdate,
			#{matOrManager},
			#{matOrCount},
			#{matOrName},
			'mo1',
			#{matOrDueDate}
		)
	</insert>

	<insert id="insertMatOrderInfo" parameterType="MatOrderInfoVO">
		INSERT INTO
		mat_order_info
		(
			mat_or_info_code,
			mat_code,
			mat_ori_count,
			mat_or_due_date

		)
		VALUES
		(
			#{matOrInfoCode},
			#{matCode},
			#{matOriCount},
			#{matOrDueDate}

		)

	</insert>


	<!-- 입고 업데이트 -->
	<update id="updateMatLot" parameterType="MaterialVO">
		UPDATE mat_lot
		SET
		mat_input_count = #{matInputCount},
		mat_input_date = #{matInputDate},
		mat_count = #{matInputCount}
		WHERE
		mat_lot_code = #{matLotCode}
	</update>
	
	<!-- 검수 업데이트 -->
	<update id="updateMatIns" parameterType="MatInspectionVO">
		UPDATE mat_inspection
		SET
		mat_ins_count = #{matInsCount},
		mat_ins_good = #{matInsGood},
		mat_ins_bad = #{matInsBad},
		mat_ins_date = #{matInsDate}
		WHERE
		mat_ins_code = #{matInsCode}
	</update>

	<delete id="deleteMatOrder" parameterType="String">
		DELETE FROM mat_order
		WHERE mat_or_code = #{matOrCode}
	</delete>


<!-- 	입고 페이지 검수 인서트 -->
	<insert id="insertMatIns" parameterType="MatInspectionVO">
		
		INSERT INTO mat_inspection
		(
			mat_ins_count,
			mat_ins_good,
			mat_ins_bad,
			mat_ins_date,
			mat_or_code,
			mat_note
		)
		VALUES
		(
			#{matInsCount},
			#{matInsGood},
			#{matInsBad},
			sysdate,
			#{matOrCode},
			#{matNote}
		)
	</insert>


<!-- 	<insert id="insertMatIns" parameterType="MatInspectionVO"> -->
<!-- 		{ call -->
<!-- 		insert_mat_inspection( -->
<!-- 		#{matInsCount, jdbcType=INTEGER}, -->
<!-- 		#{matInsBad, -->
<!-- 		jdbcType=INTEGER}, -->
<!-- 		#{matInsDate, jdbcType=DATE}, -->
<!-- 		#{matOrCode, -->
<!-- 		jdbcType=VARCHAR}, -->
<!-- 		#{matNote, jdbcType=VARCHAR} -->
<!-- 		) } -->
<!-- 	</insert> -->


	<!-- 입고 페이지 입고 인서트 -->
	<insert id="matInputInsert" parameterType="MatInputVO">

		INSERT INTO mat_lot
		(
			mat_ins_code,
			mat_input_date,
			mat_manager,
			mat_code,
			mat_input_count,
			mat_count
		)
		VALUES
		(
			#{matInsCode},
			#{matInputDate},
			#{matManager},
			#{matCode},
			#{matInputCount},
			#{matInputCount}
		)
	</insert>

	<select id="getBadMatList" parameterType="BadMatVO">
		SELECT mb.mat_bad_code,
				bm.bad_mat_code,
				bm.bad_mat_name
		FROM mat_bad mb
		RIGHT JOIN bad_material bm ON bm.bad_mat_code = bm.bad_mat_code
	</select>

	<!-- LOT 별 자재재고 -->
	<select id="getMatOriginInfoList" resultType="OriginMaterialVO">
		SELECT ml.mat_lot_code,
		        ml.mat_input_count,
		        ml.mat_input_date,
                ml.mat_count,
		        m.mat_code,
		        m.mat_name
		FROM mat_lot ml
		JOIN material m ON ml.mat_code = m.mat_code
		WHERE m.mat_code = #{matCode}
		AND ml.mat_count > 0
		ORDER BY ml.mat_lot_code
	</select>
</mapper>